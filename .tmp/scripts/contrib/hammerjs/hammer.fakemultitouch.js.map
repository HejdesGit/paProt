{"version":3,"sources":["contrib/hammerjs/hammer.fakemultitouch.js"],"names":[],"mappings":";;AAAA,CAAC,UAAS,MAAT,EAAiB;;;;;;AAMhB,SAAO,OAAP,CAAe,cAAf,GAAgC,YAAW;;AAEzC,QAAI,YAAY,KAAhB;;;AAGA,WAAO,iBAAP,GAA2B,UAAU,gBAAV,IACzB,UAAU,gBADe,IACK,UAAU,gBAAV,IAA8B,CAD9D;;;;;;;;AASA,WAAO,KAAP,CAAa,YAAb,GAA4B,UAAS,EAAT,EAAa,SAAb,EAAwB;;AAElD,UAAG,OAAO,iBAAV,EAA6B;AAC3B,eAAO,OAAO,YAAP,CAAoB,YAApB,EAAP;AACD;;AAFD,WAIK,IAAG,GAAG,OAAN,EAAe;AAClB,iBAAO,GAAG,OAAV;AACD;;;AAGD,UAAG,aAAa,OAAO,WAAvB,EAAoC;AAClC,oBAAY,KAAZ;AACD;;;;AAID,UAAG,GAAG,QAAN,EAAgB;;AAEd,YAAG,CAAC,SAAJ,EAAe;AACb,sBAAY;AACV,mBAAO,GAAG,KADA;AAEV,mBAAO,GAAG;AAFA,WAAZ;AAID;;AAED,YAAI,aAAa,UAAU,KAAV,GAAkB,GAAG,KAAtC;AACA,YAAI,aAAa,UAAU,KAAV,GAAkB,GAAG,KAAtC;;;AAGA,eAAO,CACL;AACE,sBAAY,CADd;AAEE,iBAAY,UAAU,KAAV,GAAkB,UAAlB,GAA+B,EAF7C;AAGE,iBAAY,UAAU,KAAV,GAAkB,UAAlB,GAA+B,CAAC,EAH9C;AAIE,kBAAY,GAAG;AAJjB,SADK,EAOL;AACE,sBAAY,CADd;AAEE,iBAAY,UAAU,KAAV,GAAkB,UAAlB,GAA+B,CAAC,EAF9C;AAGE,iBAAY,UAAU,KAAV,GAAkB,UAAlB,GAA+B,EAH7C;AAIE,kBAAY,GAAG;AAJjB,SAPK,CAAP;AAcD;;AA3BD,WA6BK;AACH,sBAAY,KAAZ;AACA,iBAAO,CACL;AACE,wBAAY,CADd;AAEE,mBAAY,GAAG,KAFjB;AAGE,mBAAY,GAAG,KAHjB;AAIE,oBAAY,GAAG;AAJjB,WADK,CAAP;AAQD;AACF,KAzDD;AA0DD,GAxED;AA0ED,CAhFD,EAgFG,OAAO,MAhFV","file":"contrib/hammerjs/hammer.fakemultitouch.js","sourcesContent":["(function(Hammer) {\n  /**\n   * enable multitouch on the desktop by pressing the shiftkey\n   * the other touch goes in the opposite direction so the center keeps at its place\n   * it's recommended to enable Hammer.debug.showTouches for this one\n   */\n  Hammer.plugins.fakeMultitouch = function() {\n    // keeps the start position to keep it centered\n    var start_pos = false;\n\n    // test for msMaxTouchPoints to enable this for IE10 with only one pointer (a mouse in all/most cases)\n    Hammer.HAS_POINTEREVENTS = navigator.msPointerEnabled &&\n      navigator.msMaxTouchPoints && navigator.msMaxTouchPoints >= 1;\n\n    /**\n     * overwrites Hammer.event.getTouchList.\n     * @param   {Event}     ev\n     * @param   TOUCHTYPE   type\n     * @return  {Array}     Touches\n     */\n    Hammer.event.getTouchList = function(ev, eventType) {\n      // get the fake pointerEvent touchlist\n      if(Hammer.HAS_POINTEREVENTS) {\n        return Hammer.PointerEvent.getTouchList();\n      }\n      // get the touchlist\n      else if(ev.touches) {\n        return ev.touches;\n      }\n\n      // reset on start of a new touch\n      if(eventType == Hammer.EVENT_START) {\n        start_pos = false;\n      }\n\n      // when the shift key is pressed, multitouch is possible on desktop\n      // why shift? because ctrl and alt are taken by osx and linux\n      if(ev.shiftKey) {\n        // on touchstart we store the position of the mouse for multitouch\n        if(!start_pos) {\n          start_pos = {\n            pageX: ev.pageX,\n            pageY: ev.pageY\n          };\n        }\n\n        var distance_x = start_pos.pageX - ev.pageX;\n        var distance_y = start_pos.pageY - ev.pageY;\n\n        // fake second touch in the opposite direction\n        return [\n          {\n            identifier: 1,\n            pageX     : start_pos.pageX - distance_x - 50,\n            pageY     : start_pos.pageY - distance_y - -50,\n            target    : ev.target\n          },\n          {\n            identifier: 2,\n            pageX     : start_pos.pageX + distance_x - -50,\n            pageY     : start_pos.pageY + distance_y - 50,\n            target    : ev.target\n          }\n        ];\n      }\n      // normal single touch\n      else {\n        start_pos = false;\n        return [\n          {\n            identifier: 1,\n            pageX     : ev.pageX,\n            pageY     : ev.pageY,\n            target    : ev.target\n          }\n        ];\n      }\n    };\n  };\n\n})(window.Hammer);"],"sourceRoot":"/source/"}